package de.hub.cses.ces.entity;

/*
 * #%L
 * CES-Game
 * %%
 * Copyright (C) 2015 Humboldt-Universit√§t zu Berlin,
 * Department of Computer Science,
 * Research Group "Computer Science Education / Computer Science and Society"
 * Sebastian Gross <sebastian.gross@hu-berlin.de>
 * Sven Strickroth <sven.strickroth@hu-berlin.de>
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */
import de.hub.cses.ces.entity.listener.EntityListener;
import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;
import javax.persistence.Column;
import javax.persistence.EntityListeners;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.persistence.Version;
import org.codehaus.jackson.annotate.JsonIgnore;

/**
 *
 * @author Sebastian Gross <sebastian.gross@hu-berlin.de>
 */
@MappedSuperclass
@EntityListeners(EntityListener.class)
public abstract class BaseEntity implements Serializable, Comparable<BaseEntity> {

    @Id
    @GeneratedValue(strategy = GenerationType.TABLE)
    @Column(name = "id")
    private Long id;
    @Version
    @Column(name = "version", nullable = false)
    private Timestamp version;

    /**
     * no-arg constructor
     */
    protected BaseEntity() {
    }

    /**
     *
     * @param id id of the entity (will be generated by the persistence unit)
     */
    protected BaseEntity(Long id) {
        super();
        this.id = id;
    }

    /**
     * returns the id of the object
     *
     * @return id of the entity
     */
    public Long getId() {
        return id;
    }

    /**
     * sets the id of the object
     *
     * @param id unique identifier for database entry, will be generated by the
     * persistence unit
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     *
     *
     * @return version of the database entry
     */
    @JsonIgnore
    public Timestamp getVersion() {
        return version;
    }

    /**
     * sets the version of the object
     *
     * @param version version of the database entry, will be controlled by the
     * persistence unit
     */
    public void setVersion(Timestamp version) {
        this.version = version;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final BaseEntity other = (BaseEntity) obj;
        if (!Objects.equals(this.id, other.id)) {
            return false;
        }
        if (!Objects.equals(this.version, other.version)) {
            return false;
        }
        return true;
    }

    /**
     * {@inheritDoc}
     *
     * generates a hash code based on id and version
     *
     * @return hash code of this object
     */
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 79 * hash + Objects.hashCode(this.id);
        hash = 79 * hash + Objects.hashCode(this.version);
        return hash;
    }

    @Override
    public String toString() {
        return this.getClass().getName() + " [ id: " + this.id + ", version: " + this.version + " ]";
    }

    /**
     * {@inheritDoc}
     *
     * implements the compareTo method of the comparable interface
     *
     * @param o object to be compared to
     * @return 0 if ids are equal, 1 if this id is greater than the passed
     * object's id, otherwise -1
     */
    @Override
    public int compareTo(BaseEntity o) {
        return Long.compare(this.id, o.getId());
    }
}
